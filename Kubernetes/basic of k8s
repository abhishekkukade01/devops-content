Basic kubernetes command
DAY-1
1. get all running pods
   kubectl get pods

2. run pod using docker image
    kubectl run <podname> --image=<docker image>

3. get information of running pod
    kubectl describe pod <podname>

4. delete pod 
   kubectl delete pods <podname>

5  pod yaml file - mypod.yml
     apiVersion: v1
     kind: Pod
     metadata:
       name: "mypod"
     spec:
       containers:
        - name: "myc1"
          image: "vimal13/apache-webserver-php "

 kubectl apply -f  mypod.yml

_______________________________________________________________________________________________
DAY-2
*Every time new pod come up , it will come up with new ip and new name (so ip is not fixed)
  we give a fix identity to pod  by giving it "label"

 Replication Controller

       apiVersion: v1
       kind: ReplicationController 
       metadata:
          name: "my-RC"
       spec:
          selector: 
            app : web
          replica: 3
          template:
              metadata:
                 name: "my-pod"
                 label:
                    app : web 
              spec:
                 containers:
                      - name: "myc1"
                        image: "-----"
1> apply rc
    kubectl apply -f myrc.yml

2> get list of replicaController
   kubectl get rc

3> scale up/down rc 
   kubectl scale --replicas=4 myrc.yml

4> delete rc
   kubectl delete rc <rc_name>
_________________________________________________________________________________________
 
DAY-3  Service

1) cluster IP - internal service mostly used for microservices
2) node port -  external service , external client can connect to pod through this service
3) external  - we can uses external Load balancer from cloud as a service 

 cluster IP

apiVersion: v1
kind: Service
metadata:
    name: "my-service"
spec: 
  selector:
     app: web
  ports:
     - port: 8080
       targetPort: 80
____________________________________________________________________________________________

nodePort 

apiVersion: v1
kind: Service

metadata: 
     name: myservice2
spec:
  type: NodePort
  ports:
    - port: 8080
      targetPort: 80
      
  selector:
      app: web


   



         



