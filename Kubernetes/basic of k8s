Basic kubernetes command
DAY-1
1. get all running pods
   kubectl get pods

2. run pod using docker image
    kubectl run <podname> --image=<docker image>

3. get information of running pod
    kubectl describe pod <podname>

4. delete pod 
   kubectl delete pods <podname>

5  pod yaml file - mypod.yml
     apiVersion: v1
     kind: Pod
     metadata:
       name: "mypod"
     spec:
       containers:
        - name: "myc1"
          image: "vimal13/apache-webserver-php "

 kubectl apply -f  mypod.yml

_______________________________________________________________________________________________
DAY-2
*Every time new pod come up , it will come up with new ip and new name (so ip is not fixed)
  we give a fix identity to pod  by giving it "label"

 Replication Controller

       apiVersion: v1
       kind: ReplicationController 
       metadata:
          name: "my-RC"
       spec:
          selector: 
            app : web
          replica: 3
          template:
              metadata:
                 name: "my-pod"
                 label:
                    app : web 
              spec:
                 containers:
                      - name: "myc1"
                        image: "-----"
1> apply rc
    kubectl apply -f myrc.yml

2> get list of replicaController
   kubectl get rc

3> scale up/down rc 
   kubectl scale --replicas=4 myrc.yml

4> delete rc
   kubectl delete rc <rc_name>
_________________________________________________________________________________________
 
DAY-3  Service

1) cluster IP - internal service mostly used for microservices
2) node port -  external service , external client can connect to pod through this service
3) external  - we can uses external Load balancer from cloud as a service 

 cluster IP

apiVersion: v1
kind: Service
metadata:
    name: "my-service"
spec: 
  selector:
     app: web
  ports:
     - port: 8080
       targetPort: 80
____________________________________________________________________________________________

nodePort 

apiVersion: v1
kind: Service

metadata: 
     name: myservice2
spec:
  type: NodePort
  ports:
    - port: 8080
      targetPort: 80
      
  selector:
      app: web
___________________________________________________________________________________________________________________________________

1. ClusterIP
ClusterIP is the default and most common service type.
Kubernetes will assign a cluster-internal IP address to ClusterIP service. This makes the service only reachable within the cluster.
You cannot make requests to service (pods) from outside the cluster.
You can optionally set cluster IP in the service definition file.
Use Cases
Inter service communication within the cluster. For example, communication between the front-end and back-end components of your app.

apiVersion: v1
kind: Service
metadata:
  name: my-backend-service
spec:
  type: ClusterIP # Optional field (default)
  clusterIP: 10.10.0.1 # within service cluster ip range
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8080

________________________________________________________________________________________________________________________________________
2. NodePort
NodePort service is an extension of ClusterIP service. A ClusterIP Service, to which the NodePort Service routes, is automatically created.
It exposes the service outside of the cluster by adding a cluster-wide port on top of ClusterIP.
NodePort exposes the service on each Node’s IP at a static port (the NodePort). Each node proxies that port into your Service. So, external traffic has access to fixed port on each Node. It means any request to your cluster on that port gets forwarded to the service.
You can contact the NodePort Service, from outside the cluster, by requesting <NodeIP>:<NodePort>.
Node port must be in the range of 30000–32767. Manually allocating a port to the service is optional. If it is undefined, Kubernetes will automatically assign one.
If you are going to choose node port explicitly, ensure that the port was not already used 

________________________________________________________________________________________________________________________________________________

day -4 
running wordpress mysql on k8s
-learning env variable

opening minikube container  port to host

Even though, you are exposing port 30080 via NodePort in minikube, minikube will still not expose it
because it will use its own external port to listen to this service.
Minikube tunnels the service to expose to the outer world. To find out that exposed port:

minikube service $SERVICE_NAME

______________________________________________________________________________________________________________________________________________
Running mysql db 

kubectl run mydb --image=mysql:5.7 --env=MYSQL_ROOT_PASSWORD=redhat --env=MYSQL_DATABASE=wbdb --env=MYSQL_USER=vimal --env=MYSQL_PASSWORD=redhat

kubectl logs mydb

kubectl exec -it mydb -- bash

mysql -u vimal -predhat
__________________________________________________________________________________________________________________________________________


running wordpress

kubectl run mywp1 --image=wordpress:5.1.1-php7.3-apache

kubectl expose pod mywp1 --type=NodePort --port=80

minikube service mywp1
___________________________________________________________________________________________________________________________________________________
kubectl logs mydb
check logs of pod mydb
______________________________________________________________________________________________________________________________________________
   day -5 
running pod with env variable

     apiVersion: v1
     kind: Pod
     metadata:
       name: "mypod"
     spec:
       containers:
        - name: "myc1"
          image: "mysql:8.0-debian"
          env:
             - name: MYSQL_ROOT_PASSWORD
               value: "root"
             - name: MYSQL_ALLOW_EMPTY_PASSWORD
               value: "yes"
            - name: MYSQL_RANDOM_ROOT_PASSWORD
               value: "yes"

_________________________________________________________________________________________________________________________________________
Running pod with env and using  secrets
mysecret.yml 

apiVersion: v1
kind: Secret
metadata:
  name: secret-sample
data:
  p: cm9vdA==
______________________________________________________________________________________________________________________________________
mypod.yml 

     apiVersion: v1
     kind: Pod
     metadata:
       name: "mypod"
     spec:
       containers:
        - name: "myc1"
          image: "mysql:8.0-debian"
          env:
             - name: MYSQL_ROOT_PASSWORD
               valueFrom:
                   secretKeyRef:
                     name: secret-sample
                     key: p 

             - name: MYSQL_ALLOW_EMPTY_PASSWORD
               value: "yes"

             - name: MYSQL_RANDOM_ROOT_PASSWORD
               value: "yes"


______________________________________________________________________________________________________________________________________
Day-6 
Deployment 

kubectl create deployment myd --image=vimal13/apache-webserver-php:lwv1

kubectl get deployment 

kubectl scale deployment myd  --replicas=3

kubectl set image deployment myd apache-webserver-php=vimal13/apache-webserver-php:lwv2

____________________________________________________________________________________________________________________

deployment.yml 

apiVersion: apps/v1
kind: Deployment
metadata: 
   name: static-web-deploymnet 
   namespace: sample
spec:
  replicas: 3
  template:
     metadata:
       labels:
            app: days-app
     spec:
       containers:
       - name: days-app-container
         image: vagdevik/my-first-app-image:1.1
         ports:
           - containerPort: 80
  selector:
     matchLabels:
       app: days-app   

___________________________________________________________________________________________________________________________________

volumes

empty dir 

apiVersion: v1 
kind: Pod
metadata:
    name: mypod-1
spec:
  containers:
        - name: nginx
          image: coolgourav147/nginx-custom
          volumeMounts:
              - name: my-volume
                mountPath: /data
  volumes: 
        - name: my-volume
          emptyDir: {}


 go inside container create your files in data dir and other dir as well , kill container  " service nginx stop " and find your data in same location
-----------------------------------------------------------------------------------------------------------------------------------------------------------
















         



